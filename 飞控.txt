/*
无人机基本控制文件
作用：用于控制无人机的角度和角速度
*/

/*
包含了数学计算库头文件mymath.h
包含了基本控制头文件Ctrl.h
包含了传感器姿态头文件IMU.h
包含了传感器数据准备头文件mpu_prepare.h
包含了全局引用用头文件include.h
包含了电机控制头文件Motor.h
包含了遥控器控制头文件RC.h
包含了基本数据类型头文件Data.h
包含了高度融合头文件Alt_data.h
包含了速度融合头文件MotionCal.h
包含了定高控制头文件AltCtrl.h
包含了定点控制头文件LocCtrl.h
包含了卡尔曼滤波头文件kalman.h
包含了BB响驱动头文件Drv_Buzzer.h
*/
#include "mymath.h"
#include "Ctrl.h"
#include "IMU.h"
#include "mpu_prepare.h"
#include "include.h"
#include "Motor.h"
#include "RC.h"
#include "Data.h"
#include "Alt_data.h"
#include "MotionCal.h"
#include "AltCtrl.h"
#include "LocCtrl.h"
#include "kalman.h"
#include "Drv_Buzzer.h"

/*
结构体locPID数据类型的实例化rol_2 pit_2 yaw_2 rol_1 pit_1 yaw_1
其中包含了：
float P,I,D;比例P 比例I 比例D
float p_out,i_out,d_out;P的输出量 I的输出量 D的输出量
float err,err1;误差 上一次误差
float out;PID汇总的输出量
*/
locPID rol_2;
locPID pit_2;
locPID yaw_2;
locPID rol_1;
locPID pit_1;
locPID yaw_1;

/*
函数：PID姿态环的初始化
*/
void CTRL_2_PID_Init()//角度环
{
	/*
	分别将实例化后的rol_2 pit_2 yaw_2的PID参数赋值
	*/
	rol_2.P = Param.PID_rol.kp *0.001f;
	rol_2.I = Param.PID_rol.ki *0.001f;
	rol_2.D = Param.PID_rol.kd *0.001f;
	
	pit_2.P = Param.PID_pit.kp *0.001f;
	pit_2.I = Param.PID_pit.ki *0.001f;
	pit_2.D = Param.PID_pit.kd *0.001f;

	yaw_2.P = Param.PID_yaw.kp *0.001f;
	yaw_2.I = Param.PID_yaw.ki *0.001f;
	yaw_2.D = Param.PID_yaw.kd *0.001f;
}

/*
函数：PID角速度环的初始化
*/
void CTRL_1_PID_Init()//角速度环
{
	/*
	分别将实例化后的rol_1 pit_1 yaw_1的PID参数赋值
	*/
	rol_1.P = Param.PID_rol_s.kp *0.001f;
	rol_1.I = Param.PID_rol_s.ki *0.001f;
	rol_1.D = Param.PID_rol_s.kd *0.001f;
	
	pit_1.P = Param.PID_pit_s.kp *0.001f;
	pit_1.I = Param.PID_pit_s.ki *0.001f;
	pit_1.D = Param.PID_pit_s.kd *0.001f;

	yaw_1.P = Param.PID_yaw_s.kp *0.001f;
	yaw_1.I = Param.PID_yaw_s.ki *0.001f;
	yaw_1.D = Param.PID_yaw_s.kd *0.001f;
}

/*
函数：所有PID总的初始化
*/
void pid_init(void)
{
	/*PID角速度环的初始化*/
	CTRL_1_PID_Init();
	/*PID姿态环的初始化*/
	CTRL_2_PID_Init();
	/*高度速度环PID参数初始化*/
	Alt_1level_PID_Init();
	/*高度环2的PID参数初始化*/
	Alt_2level_PID_Init();
	/*位置速度环PID参数初始化*/
	Loc_1level_PID_Init();
	/*位置环PID参数初始化*/
	Loc_2level_PID_Init();
}

/*
函数：角度环PID控制
调用参数：两次调用时间间隔 积分限幅权重 期望与反馈的结构体
*/
void CTRL_2(float dT,float weight,_copter_ctrl_st *data)
{
	/*位置PID算法 时间差 期望 反馈 PID结构体 积分限幅*/
	LocPID_Calc( dT,data->exp_rol,data->fb_rol,&rol_2,MAX_ROL_SPEED*weight );
	LocPID_Calc( dT,data->exp_pit,data->fb_pit,&pit_2,MAX_ROL_SPEED*weight );
	LocPID_Calc( dT,data->exp_yaw,data->fb_yaw,&yaw_2,MAX_ROL_SPEED*weight );
}

/*
函数：角速率环
调用参数：两次调用时间间隔 积分限幅权重 期望与反馈的结构体
*/
void CTRL_1(float dT,float weight,_copter_ctrl_st *data) //
{
	/*位置PID算法 时间差 期望 反馈 PID结构体 积分限幅*/
	LocPID_Calc( dT,data->exp_rol,data->fb_rol,&rol_1,500*weight );
	LocPID_Calc( dT,data->exp_pit,data->fb_pit,&pit_1,500*weight );
	LocPID_Calc( dT,data->exp_yaw,data->fb_yaw,&yaw_1,500*weight );
}

/*
结构体_copter_ctrl_st数据类型的实例化ctrl_1 ctrl_2
其中包含了：
float exp_rol;期望横滚
float exp_pit;期望俯仰
float exp_yaw;期望航向
float fb_rol;反馈横滚
float fb_pit;反馈俯仰
float fb_yaw;反馈航向
*/
_copter_ctrl_st ctrl_1;
_copter_ctrl_st ctrl_2;

/*
全局变量补偿后的平均油门
值：基本油门根据倾角除以反三角函数后的补偿油门，保证倾斜时推力补偿
*/
float out_thr_curve;

/*
结构体_fix_inte_filter_st数据类型的实例化yaw_fus
其中包含了：
float in_est_d;每次循环强加上的（估计值）
float in_obs;被积分滤波的值（观测值）
float fix_kp;积分滤波比例
float e_limit;计算过程e的限幅
float e;不断更新的计算过程e
float out;不断更新的计算结果
*/
extern _fix_inte_filter_st yaw_fus;

/*
全局变量是否无头模式
值：1正在无头模式中，0并非无头模式中
*/
u8 No_Head_Mode = 0;

/*
全局变量用于无头模式的变量
Rc_Angle是过度量
*/
float Rc_Angle,Rc_Abs;

/*
函数：无头模式的航向转换控制
调用参数：遥控量横滚 遥控量俯仰 起飞前航向+当前航向
*/
void No_Head(float *x,float *y,float angle)
{
	/*将 起飞前航向+当前航向 转换为弧度*/
	angle    = angle * ANG_2_RAD;
	
	/*通过反三角函数计算遥控器杆的拨杆角度 横滚的控制量除以斜边*/
	Rc_Angle = asinf( (*x)/Rc_Abs );
	/*将上述计算结果做边界约束 角度转换到-PI~0~PI*/
	if((*x)<0 && (*y)<0)
	{
		Rc_Angle = -PI - Rc_Angle;
	}
	else if((*x)>0 && (*y)<0)
	{
		Rc_Angle = PI - Rc_Angle;
	}
	/*180角度的状态*/
	else if((*x)==0 && (*y)<0)
	{
		Rc_Angle = PI;
	}

	/*通过角度相加方式计算三角函数后重定义遥控量横滚*/
	*x = Rc_Abs*sinf(Rc_Angle+angle);
	/*通过角度相加方式计算三角函数后重定义遥控量俯仰*/
	*y = Rc_Abs*cosf(Rc_Angle+angle);
}

/*
全局变量是否旋转保持
值：1正在旋转保持中，0并非旋转保持中
*/
u8 yaw_hold;

/*全局变量期望航向速度*/
s16 exp_yaw_speed;
/*全局变量起飞前航向 当前航向*/
float Turn_Angle,Star_Angle;
/*全局变量遥控量横滚 遥控量俯仰*/
float ch_rol,ch_pit;

/*
函数：角度环的PID控制
调用参数dT_s为两次调用的间隔时长
被高度控制函数调用，控制频率250hz
*/
void Att_Ctrl2(float dT)
{
	/*如果start==0为真，gf.out_weight被赋值0*/
	/*如果start==0为假，gf.out_weight被赋值1*/
	gf.out_weight = (start==0)?0:1;

	/*如果1正在自动起飞中，2并手动起飞中，则环2的PID控制输出使能为真
	其中start值：1正在自动起飞中，2并手动起飞中，0非起飞中*/
	if(start)
	{
		/*如果gf.out_weight_slow小于1*/
		if(gf.out_weight_slow<1)
			/*gf.out_weight_slo缓慢自加，扩大限幅的幅度*/
			gf.out_weight_slow += 2.0f *0.003f;
		/*如果gf.out_weight_slow大于或等于1*/
		else
			/*gf.out_weight_slow被赋值为1，最大限幅的幅度*/
			gf.out_weight_slow = 1;
	}
	/*如果不在起飞中*/
	else
		/*清零gf.out_weight_slow，不允许姿态环控制*/
		gf.out_weight_slow = 0;
	
	/*检查全局变量是否在空翻模式*/
	if(Flip_Mode)
		/*如果在空翻中，清零gf.out_weight_slow，不允许姿态环控制*/
		gf.out_weight_slow = 0;
	
	/*读取遥控器横滚的控制量*/
	ch_rol = CH_N[ROL];
	/*读取遥控器俯仰的控制量*/
	ch_pit = CH_N[PIT];

	/*通过勾股定理计算摇杆的斜边长*/
	Rc_Abs = sqrtf(ch_rol*ch_rol + ch_pit*ch_pit);
	
	/*如果是无头模式*/
	if(No_Head_Mode)
		/*调用无头模式控制函数*/
		No_Head(&ch_rol,&ch_pit,Turn_Angle+Star_Angle);

	/*如果是在空翻模式*/
	if(flip.start)
	{
		/*用于姿态的PID控制的反馈角度空翻滚的反角度*/
		ctrl_2.fb_rol = flip.angle_x;
		ctrl_2.fb_pit = flip.angle_y;
	}
	/*如果不是在空翻模式*/
	else
	{
		/*用于姿态的PID控制的反馈角度为真实传感器的角度*/
		ctrl_2.fb_rol = imu_data.fus_rol;
		ctrl_2.fb_pit = imu_data.fus_pit;
	}
	
	/*如果已开启光流定点模式*/
	if(Fixed_Point_Mode)
	{
		/*姿态环的期望为光流的位置环控制量*/
		ctrl_2.exp_rol = +ct_loc_out[X];
		ctrl_2.exp_pit = -ct_loc_out[Y];
	}
	/*如果未开启光流定点模式*/
	else
	{
		/*姿态环的期望为遥杆的控制量*/
		ctrl_2.exp_rol = (0.002f *(+ch_rol)) *(MAX_ROL_ANGLE +(float)(CH_N[AUX3]-500)*0.001f*20.0f);
		ctrl_2.exp_pit = (0.002f *(-ch_pit)) *(MAX_PIT_ANGLE +(float)(CH_N[AUX3]-500)*0.001f*20.0f);
	}
	
	/*局部静态变量是否已记录起飞航向*/
	static u8 reset_yaw = 0;
	
	/*如果1正在自动起飞中，2并手动起飞中，则环2的PID控制输出使能为真
	其中start值：1正在自动起飞中，2并手动起飞中，0非起飞中*/
	if(start)
	{
		/*如果reset_yaw为零，即没有记录起飞航向*/
		if(!reset_yaw)
		{
			/*如果是编队模式*/
			if(formation_mode || sys.single_format)
				/*起飞前需要清零航向，让飞机处于一个方向*/
				yaw_fus.out = imu_data.fus_yaw = 0;
			/*记录起飞前航向，用于无头控制*/
			Star_Angle =  imu_data.fus_yaw;
			/*记录起飞前航向相反值，用于无头控制*/
			Turn_Angle = -imu_data.fus_yaw;
			/*将reset_yaw赋值为1，标记已经记录起飞航向*/
			reset_yaw = 1;
		}
	}
	/*否则，飞机并未起飞*/
	else
		/*赋值reset_yaw为零*/
		reset_yaw = 0;
	
	/*如果是编队模式*/
	if(formation_mode || sys.single_format)
		/*清零起飞前航向，清零起飞前航向相反值*/
		Star_Angle = Turn_Angle = 0;
	
	/*如果期望航向+位置控制的角度输出量+自旋控制的总和不为零*/
	if( (exp_yaw_speed+ct_loc_out[Z]+rotate_speed) != 0 )
		/*清零全局变量旋转保持*/
		yaw_hold = 0;
	/*否则，如果陀螺仪航向轴的绝对值小于50*/
	else if(ABS(sensor.Gyro_deg.z)<50)
		/*开启全局变量旋转保持*/
		yaw_hold = 1;
	
	/*如果是航向锁定模式*/
	if(flag.yaw_lock)
		/*通过将Turn_Angle赋值零锁定航向*/
		Turn_Angle = 0;
	/*否则不是航向锁定模式，同时不保持旋转*/
	else if(!yaw_hold)
		/*通过将Turn_Angle赋值航向，同时清零角速度环航向轴的积分*/
		Turn_Angle = -imu_data.fus_yaw, yaw_1.i_out = 0;
	
	/*定义fb_yaw_temp yaw反馈角度 为当前航向 加上 被锁定时候的期望的航向*/
	float fb_yaw_temp = imu_data.fus_yaw + Turn_Angle;
	
	/*通过值大小判断，将反馈角度限制在+-180*/
	/*如果fb_yaw_temp大于180，*/
	if	(fb_yaw_temp> 180)
		/*则减少360，使其区间在-180*/
		fb_yaw_temp -= 360;
	/*如果fb_yaw_temp小于-180，*/
	else if(fb_yaw_temp<-180)
		/*则增加360，使其区间在+180*/
		fb_yaw_temp += 360;
	
	/*姿态环航向的期望角度为零*/
	ctrl_2.exp_yaw = 0;
	/*姿态环航向的反馈角度为fb_yaw_temp*/
	ctrl_2.fb_yaw = fb_yaw_temp;
	
	/*调用函数：角度环PID控制，其中调用参数：两次调用时间间隔 积分限幅权重 期望与反馈的结构体*/
	CTRL_2(dT,gf.out_weight_slow,&ctrl_2);
}

/*
函数：角速度环的PID控制
调用参数dT_s为两次调用的间隔时长
被高度控制函数调用，控制频率500hz
*/
void Att_Ctrl1(float dT)
{
	/*浮点类型 ch4 为遥杆的控制量*/
	float ch4 = CH_N[YAW];
	
	/*期望ctrl_1.exp_rol为姿态环的PID控制量rol*/
	ctrl_1.exp_rol = rol_2.out;
	/*期望ctrl_1.exp_pit为姿态环的PID控制量pit*/
	ctrl_1.exp_pit = pit_2.out;
	
	/*调用自旋控制函数*/
	Rotate_Ctrl(dT);//自动旋转
	/*如果状态标志位锁尾模式为真，*/
	if(flag.yaw_lock)
		/*ch4清零用于航向锁定*/
		ch4 = 0;
	
	/*通过遥控器旋钮计算航向的限幅权重*/
	float yaw_weight = (float)(CH_N[AUX1]+500)*0.001f*0.6f + 0.4f;
	/*期望摇杆的航向速度限幅*/
	exp_yaw_speed = 0.002f *(ch4)*yaw_weight*MAX_YAW_SPEED;
	
	/*航向角速度环控制的期望 由 + 期望摇杆的航向 + + + */
	ctrl_1.exp_yaw = LIMIT(yaw_2.out,-100,100) + exp_yaw_speed + ct_loc_out[Z] + rotate_speed;

	ctrl_1.exp_rol = LIMIT(ctrl_1.exp_rol,-MAX_FLIP_SPEED,MAX_FLIP_SPEED);
	ctrl_1.exp_pit = LIMIT(ctrl_1.exp_pit,-MAX_FLIP_SPEED,MAX_FLIP_SPEED);
	ctrl_1.exp_yaw = LIMIT(ctrl_1.exp_yaw,-MAX_YAW_SPEED,MAX_YAW_SPEED);

	//反馈角速度
	ctrl_1.fb_rol =  sensor.Gyro_deg.x;
	ctrl_1.fb_pit = -sensor.Gyro_deg.y;
	ctrl_1.fb_yaw = -sensor.Gyro_deg.z;

	//角速度环控制
	CTRL_1(dT,gf.out_weight_slow,&ctrl_1);

	//输出限幅
	rol_1.out = gf.out_weight *LIMIT(rol_1.out,-500,500);
	pit_1.out = gf.out_weight *LIMIT(pit_1.out,-500,500);
	yaw_1.out = gf.out_weight *LIMIT(yaw_1.out,-500,500);
	
	//油门补偿并且限幅
	out_thr_curve = ct_val_thr / cosf( LIMIT(imu_data.angle,0,30) * ANG_2_RAD );

	motor_ctrl(dT,(s16)rol_1.out,(s16)pit_1.out,(s16)yaw_1.out,(s16)out_thr_curve);
}

#define ROTATE_SPEED 30
u8 rotate_Done;
float rotate_speed,rotate_angle;

//自旋控制
void Rotate_Ctrl(float dT)
{
	static float angle_temp;
	
	if(rotate_Done)
	{
		angle_temp = 0;
		rotate_speed = 0;
		rotate_angle = 0;
		return;
	}
	
	if(rotate_angle>0) rotate_speed += dT*ROTATE_SPEED; else rotate_speed -= dT*ROTATE_SPEED;
	
	rotate_speed = LIMIT(rotate_speed,-ROTATE_SPEED,ROTATE_SPEED);
	
	angle_temp += dT*sensor.Gyro_deg.z;
	
	if( ABS(angle_temp)>=ABS(rotate_angle) ) 
	{
		//yawing = 0;
		rotate_Done = 1;
	}
	else
	{
		//yawing = 1;
	}
}

/*
全局变量start自动手动起飞状态标志
值：1正在自动起飞中，2并手动起飞中，0非起飞中
全局变量auto_landing自动降落标志位
值：1开始自动降落，0未开始自动降落
全局变量auto_take_off自动起飞状态标志
值：1开始自动起飞，0结束自动起飞
*/
u8 start=0,auto_landing=0,auto_take_off=0;
/*
全局变量high_start自动起飞目标高度被设定
值：通常为80，单位厘米
*/
float high_start;

/*
函数：高度控制
调用参数dT为两次调用的间隔时长
被任务调度周期函数调用，控制频率100hz
*/
void High_Ctrl(float dT)
{
	/*局部静态变量，判断起降的计时*/
	static float time;

	/*遥控器设置无人机的XYZ方向的速度归一化*/
	fs.speed_set_norm[Z] = CH_N[THR]*0.002;
	/*遥控器设置无人机的XYZ方向的速度归一化滤波后*/
	fs.speed_set_norm_lpf[Z] += (fs.speed_set_norm[Z] - fs.speed_set_norm_lpf[Z])*0.1f;//低通滤波

	/*如果，在未解锁的状态下*/
	if(fly_ready == 0)
	{
		/*清零判断起降的计时*/
		time = 0;
		/*清零start状态机*/
		start = 0;
		mini.en = 0;
		tag.star_init = 0;
		auto_landing = 0;
		Tracking_Line_En = 0;
		fs.speed_set[Z] = 0;
	}
	/*否则，在已解锁的状态下*/
	else
	{
		if(start && ( ct_val_thr<200) )//降落判断
		{
			time += dT;
			if(time>=1.0f)
			{
				if(CH_N[THR]<-400 || auto_landing || flag.NS==0)
				{
					auto_lock = 1;//标记为自动上锁
					Lock_Fly();//上锁
				}
			}
		}
		else time = 0;

		switch(start)
		{
			//没有起飞
			case 0:
			{
				if(CH_N[THR]>=0)
				{
					if(auto_take_off) start = 1;//自动起飞
					else start = 2;//手动起飞
				}
				else fs.speed_set[Z] = 0 ;
			}
			break;

			//自动起飞阶段
			case 1:
			{
				exp_[Z] = high_start;//目标高度
				ct_alt_hold = 1;
				start = 2;
			}
			break;

			//飞行中
			default:
			{
				if( wcz_h_fus.out>(high_start-10) ) auto_take_off = 0;//自动起飞完成
				
				//遥控控制高度
				if(fs.speed_set_norm_lpf[Z]>=0)
					fs.speed_set[Z] = fs.speed_set_norm_lpf[Z]*MAX_U_SPEED*((float)(CH_N[AUX2]+500)*0.0006f+0.4f);//设置速度
				else
					fs.speed_set[Z] = fs.speed_set_norm_lpf[Z]*MAX_D_SPEED*((float)(CH_N[AUX2]+500)*0.0005f+0.5f);//设置速度
				
				fs.speed_set[Z] += flip.up_speed;
			}
			break;
		}
	}

	/*高度环控制*/
	Alt_2level_Ctrl(dT);
	/*高度速度环控制*/
	Alt_1level_Ctrl(dT);
}

u8 obs_mode = 0, yawing = 0;
u8 Fixed_Point_Mode = 0,Fixed_Point = 0;

//定点控制，控制频率50hz
void Fixed_Point_Ctrl(float dT)
{
	//遥控数据归1化
	fs.speed_set_norm[X] = ch_rol*0.002;
	fs.speed_set_norm[Y] = ch_pit*0.002;
	fs.speed_set_norm_lpf[X] += 0.1f *(fs.speed_set_norm[X] - fs.speed_set_norm_lpf[X]);//低通滤波
	fs.speed_set_norm_lpf[Y] += 0.1f *(fs.speed_set_norm[Y] - fs.speed_set_norm_lpf[Y]);//低通滤波

	if(!Fixed_Point_Mode && !Follow_Target_Mode && !Tracking_Line_Mode)
	{
		ct_loc_out[X] = 0;
		ct_loc_out[Y] = 0;
		ct_loc_out[Z] = 0;
		return;
	}
	
	switch(start)
	{
		case 0://没有起飞
			Fixed_Point =  0;//不定点
			fs.speed_set[X] = 0;//速度为零
			fs.speed_set[Y] = 0;//速度为零
		break;

		case 1://自动起飞阶段
			Fixed_Point =  1;	//开启定点
			fs.speed_set[X] = 0;//速度为零
			fs.speed_set[Y] = 0;//速度为零
		break;

		default://飞行过程中
			if(auto_landing)
			{
				Fixed_Point =  1;//开启定点
				fs.speed_set[X] = fs.speed_set_norm_lpf[X]*100;//设置速度
				fs.speed_set[Y] = fs.speed_set_norm_lpf[Y]*100;//设置速度
			}
			else
			{
				Fixed_Point =  1;//开启定点
				
				fs.speed_set[X] = fs.speed_set_norm_lpf[X]*(200+(float)(CH_N[AUX3]-500)*0.001f*150.0f);//设置速度
				
				if( obs_mode && obsSensor[0].isObstacle && wcz_h_fus.out>50) //前方遇到障碍物
				{
					fs.speed_set[Y] = -obsSensor[0].obsSpeed;
				}
				else fs.speed_set[Y] = fs.speed_set_norm_lpf[Y]*(200+(float)(CH_N[AUX3]-500)*0.001f*150.0f);//设置速度
			}
		break;
	}
	
	if( !Tracking_Line_Mode && ABS(exp_yaw_speed)>100 ) yawing = 1; else yawing = 0;
	
	if(yawing) GPIO_UART2->BRR = UART2_Pin_TX; else GPIO_UART2->BSRR = UART2_Pin_TX;//打开、关闭旋转模式

	Loc_2level_Ctrl(dT);//位置环控制
	Loc_1level_Ctrl(dT);//位置速度环控制
}

void Walk_Ctrl(u8 dir,float speed)
{
	speed = ABS(speed);
	speed = LIMIT(speed,0,MAX_LOC_SPEED);
	
	switch(dir)
	{
		case S:
			if(Tracking_Line_Mode)
			{
				if( !line.up_ok   && !line.down_ok  ) MV.x = 0;
				if( !line.left_ok && !line.right_ok ) MV.y = 0;
			}
		
			loc_free[X] = 0;
			loc_free[Y] = 0;
			
			tracking.s[X] = 0;
			tracking.s[Y] = 0;
		break;
		
		case F:
			loc_free[X] = 0;
			loc_free[Y] = 1;
			
			tracking.s[X] = 0;
			tracking.s[Y] = speed;
		break;

		case B:
			loc_free[X] = 0;
			loc_free[Y] = 1;
			
			tracking.s[X] = 0;
			tracking.s[Y] = -speed;
		break;
		
		case L:
			loc_free[X] = 1;
			loc_free[Y] = 0;
			
			tracking.s[X] = -speed;
			tracking.s[Y] = 0;
		break;
		
		case R:
			loc_free[X] = 1;
			loc_free[Y] = 0;
			
			tracking.s[X] = speed;
			tracking.s[Y] = 0;
		break;
	}
}

#define HOVER_TIME 3 //悬停时间
_tracking_ctrl_st tracking;

u8 Follow_Target_Mode=0;
u8 Target_Type=BLACK_BLOC;
s16 Target_ID=0;
u8 Tracking_Line_Mode=0,Tracking_Line_En=0;
u8 TRACKING_SPEED = 40;

//循迹控制，控制频率50hz
void Tracking_Ctrl(float dT)
{
	if(Tracking_Line_Mode==0 || Tracking_Line_En==0) 
	{
		Walk_Ctrl(S,0);
		tracking.time = 0;
		tracking.dir = S;
		tracking.last_dir = NUL;
		return;
	}
	
	tracking.time += dT;//计时
	
	switch(tracking.dir)
	{
		case S://悬停
			
			if( tracking.time>HOVER_TIME )
			{
				//判断飞行方向
				if(tracking.last_dir==S)
				{
					if( tracking.exp_dir==F && line.up_ok) tracking.dir = F;//指定飞行方向
					else if( tracking.exp_dir==B && line.down_ok) tracking.dir = B;//指定飞行方向
					else if( tracking.exp_dir==L && line.left_ok) tracking.dir = L;//指定飞行方向
					else if( tracking.exp_dir==R && line.right_ok) tracking.dir = R;//指定飞行方向
					else tracking.dir = END;
				}
				else if(tracking.last_dir==F)
				{
					if(line.up_ok)    						tracking.dir = F;
					else if(line.left_ok&&line.right_ok ) 	tracking.dir = END;
					else if(line.left_ok)  				tracking.dir = L;
					else if(line.right_ok) 				tracking.dir = R;
					else									tracking.dir = NUL;
				}
				else if(tracking.last_dir==B)
				{
					if(line.down_ok)    					tracking.dir = B;
					else if(line.left_ok&&line.right_ok) 	tracking.dir = END;
					else if(line.left_ok)  				tracking.dir = L;
					else if(line.right_ok) 				tracking.dir = R;
					else									tracking.dir = NUL;
				}
				else if(tracking.last_dir==L)
				{
					if(line.left_ok)					tracking.dir = L;
					else if(line.up_ok&&line.down_ok)	tracking.dir = END;
					else if(line.up_ok)   				tracking.dir = F;
					else if(line.down_ok) 				tracking.dir = B;
					else								tracking.dir = NUL;
				}
				else if(tracking.last_dir==R)
				{
					if(line.right_ok)					tracking.dir = R;
					else if(line.up_ok&&line.down_ok)	tracking.dir = END;
					else if(line.up_ok)   				tracking.dir = F;
					else if(line.down_ok) 				tracking.dir = B;
					else								tracking.dir = NUL;
				}
				else
				{
					if(line.up_ok)    		tracking.dir = F;
					else if(line.left_ok)  tracking.dir = L;
					else if(line.right_ok) tracking.dir = R;
					else if(line.down_ok)  tracking.dir = B;
					else                   tracking.dir = END;
				}

				tracking.step = 0;
			}
			else Walk_Ctrl(S,0);
			
		break;
		
		case F://往前走
		case B://往后走

			switch(tracking.step)
			{
				case 0:
					
					tracking.step = 1;
					tracking.speed = TRACKING_SPEED;
					Walk_Ctrl(tracking.dir,tracking.speed);
					
				break;
				
				case 1:
					
					//判断是否已经往目标方向飞行
					if(line.left_ok==0 && line.right_ok==0)
					{
						tracking.step = 2;
					}
					Walk_Ctrl(tracking.dir,tracking.speed);
					
				break;
					
				case 2:
					
					//到达路口
					if( (tracking.dir==B && line.down_ok==0) || (tracking.dir==F && line.up_ok==0) )
					{
						tracking.last_dir = tracking.dir;
						tracking.dir = S;
						tracking.time = 0;
					}
					else
					{
						tracking.speed = TRACKING_SPEED * (20 - LIMIT( ABS(line.angle),0,20 ) ) / 20;//转弯时减速
						tracking.speed = tracking.speed * (30 - LIMIT( ABS(loc_x),0,30 ) ) / 30;//偏离减速
						tracking.speed = LIMIT(tracking.speed,0,TRACKING_SPEED);
						Walk_Ctrl(tracking.dir,tracking.speed);
					}
					
				break;
			}
			
		break;
		
		case L://往左走
		case R://往右走
			
			switch(tracking.step)
			{
				case 0:
					
					tracking.step = 1;
					tracking.speed = TRACKING_SPEED;
					Walk_Ctrl(tracking.dir,tracking.speed);
					
				break;
					
				case 1:
					
					//判断是否已经往目标方向飞行
					if(line.up_ok==0 && line.down_ok==0)
					{
						tracking.step = 2;
					}
					Walk_Ctrl(tracking.dir,tracking.speed);
					
				break;
					
				case 2:
					
					//到达路口
					if( (tracking.dir==L && line.left_ok==0) || (tracking.dir==R && line.right_ok==0) )
					{
						tracking.last_dir = tracking.dir;
						tracking.dir = S;
						tracking.time = 0;
					}
					else
					{
						tracking.speed = TRACKING_SPEED * (20 - LIMIT( ABS(line.angle),0,20 ) ) / 20;//转弯时减速
						tracking.speed = tracking.speed * (30 - LIMIT( ABS(loc_y),0,30 ) ) / 30;//偏离减速
						Walk_Ctrl(tracking.dir,tracking.speed);
					}
					
				break;
			}
			
		break;
		
		case END://定点降落

			Walk_Ctrl(S,0);
			auto_landing = 1;
			
		break;
		
		case NUL://定点降落
				
			Walk_Ctrl(S,0);
			auto_landing = 1;
			
		break;
		
		default: break;
	}
}

s16 balance[MOTOR_NUM],balance_max;
s16 motor[MOTOR_NUM];

void motor_ctrl(float dT,s16 ct_val_rol,s16 ct_val_pit,s16 ct_val_yaw,s16 ct_val_thr)
{
	u8 i;

	//平衡输出
	balance[m0] += (+ct_val_rol +ct_val_pit -ct_val_yaw - balance[m0]) *0.5f;
	balance[m1] += (-ct_val_rol +ct_val_pit +ct_val_yaw - balance[m1]) *0.5f;
	balance[m2] += (-ct_val_rol -ct_val_pit -ct_val_yaw - balance[m2]) *0.5f;
	balance[m3] += (+ct_val_rol -ct_val_pit +ct_val_yaw - balance[m3]) *0.5f;

	//求平衡输出最大值
	/*先将多路电机平衡转速控制量赋值给电机转速最大平衡值*/
	balance_max = ABS(balance[m0]);
	for(i=m1;i<MOTOR_NUM;i++)
	{
		/*如果其中任何一路电机的平衡转速控制大于电机转速最大平衡值*/
		if( balance_max < ABS(balance[i]) )
			/*将多路电机平衡转速控制量赋值给电机转速最大平衡值*/	
			balance_max = ABS(balance[i]);
	}

	/*电机转速最大平衡值限幅为0到500*/
	balance_max = LIMIT(balance_max,0,500);
	/*将控制电机的平均油门量限幅到0到1000减电机转速最大平衡值*/
	ct_val_thr = LIMIT(ct_val_thr,0,1000-balance_max);
	
	/*电机最终输出 由 控制电机的平均油门量 + 多路电机平衡转速控制量*/
	motor[m0] = ct_val_thr + balance[m0];
	motor[m1] = ct_val_thr + balance[m1];
	motor[m2] = ct_val_thr + balance[m2];
	motor[m3] = ct_val_thr + balance[m3];

	for(i=0;i<MOTOR_NUM;i++)
	{
		if(fly_ready)
		{
			motor[i] = LIMIT(motor[i],0,1000);//正常飞行
		}
		else if(idling)
		{
			motor[i] = (CH_N[THR]+500)*0.3;//怠速
		}
		else
		{
			motor[i] = 0;//停机
		}
	}
	
	if(!buzzer_mode) motor_out(motor);
}

/*
	   m1     m2
		 \   /
   机头  <-----	屁股
		 /   \
	   m0     m3
*/

_servo_ctrl_st servo = {.en=0,.running=0};

/*脉宽对应角度：
	0.5ms----------- 0度
	1.0ms----------- 45度
	1.5ms----------- 90度
	2.0ms-----------135度
	2.5ms-----------180度
每ms对应500*/

void Servo_Ctrl(float dT)
{
	static u8 init = 0;
	static float angle = 0;
	
	if(!servo.en){ init = 0; return; }
	if(!servo.running) return;
	if(!init){ angle = servo.exp_angle; init = 1; }
	
	float d_angle = servo.exp_angle - angle;
	float dT_angle = servo.deg_speed*dT;
	
	if(ABS(d_angle)>=dT_angle)
	{
		if(d_angle>0) angle += dT_angle;
		if(d_angle<0) angle -= dT_angle;
	}
	else
	{
		angle = servo.exp_angle;
		servo.running = 0;
	}

	PWM6 = 1250 - LIMIT(angle+Param.PID_servo.kp-Param.PID_servo.kd,1,179)*5.55555f;
	PWM7 = 250  + LIMIT(angle-Param.PID_servo.kp+Param.PID_servo.kd,1,179)*5.55555f;
}

float magnet_time = 0;

//电磁铁控制
void Magnet_Ctrl(float dT)
{
	if(fly_ready||servo.en)
	{ 
		magnet_time = 0;
		return;
	}
	
	magnet_time += dT;
	
	//10s自动关闭电磁铁
	if(magnet_time>=10)
	{
		PWM6 = PWM7 = 0;
	}
}

u8 Self_Test = 0;
u8 imu_cal_flag = 0;

//开机自检
void Power_On_Self_Test(float dT)
{
	static float time = 0;
	
	if(Self_Test) return;
	
	time+=dT;
	
	if( ABS(imu_data.a_acc.x)<200 && ABS(imu_data.a_acc.y)<200 && ABS(imu_data.a_acc.z)<200 &&
		ABS(sensor.Gyro_deg.x)<1 && ABS(sensor.Gyro_deg.y)<1 && ABS(sensor.Gyro_deg.z)<1 )
	{
		if(time>1)
		{
			Self_Test = 1;
			buzzer_warn = 3;
			baro_reset = 1;//高度清零
			loc_reset = 1;//水平位置清零
			yaw_fus.out = 0;//航向清零
		}
	}
	else
	{
		time = 0;
		fly_ready = 0; 
		if(imu_cal_flag) buzzer_warn = 2;
		else buzzer_warn = 1;
	}
}

u8 Throw_Fly_Mode=0;

//抛飞检测
void Throw_Fly_Check(float dT)
{
	static u8 throw_step;
	
	if(fly_ready || !Throw_Fly_Mode)
	{
		throw_step = 0; 
		return;
	}

	//检测上升
	switch(throw_step)
	{
		case 0: if(wcz_hs_fus.out > 200) throw_step = 1; break;//检测上升
		case 1: 
			if( (fb_v[Z]-fb_v_o[Z])<0 )
			{
				fly_ready = 1;//解锁
				start = 2;//直接切换到正常飞行状态
				exp_[Z] = wcz_h_fus.out + 100;//起飞高度
			}
		break;
	}
}

//姿态异常检测
void Att_Err_Check(float dT)
{
	static float time;

	if(!fly_ready) return;

	if( imu_data.angle>60 ) time += dT;
	else 	time = 0;

	if(time>0.2f)
	{
		Lock_Fly();//上锁
	}
}

//自动起飞
void Auto_TakeOff(float dT)
{
	static float time = 0;
	
	if( fly_ready || flag.low_power ){ time = 0; return; }

	if(idling==2)//软件自动起飞，idling==1是手动自动起飞
	{
		time += dT;
		
		if( time>1 )
		{
			fly_ready = 1;
			auto_take_off = 1;
			if(Tracking_Line_Mode) Tracking_Line_En = 1;
		}
	}
}

s16 landing_speed;

//自动降落
void Auto_Landing(float dT)
{
	if(!fly_ready) return;
	
	if(CH_N[THR]!=0) auto_landing = 0;//动油门会自动取消自动降落

	if(auto_landing || flag.NS==0)
	{
		landing_speed = -LIMIT(MAX_LOC_SPEED,0,50);
		if(imu_data.w_acc.z>5000||(vl53l1x.is_valid&&vl53l1x.Distance_Fix<10))
		{
			Lock_Fly();//上锁
		}
	}
	else landing_speed = 0;
}

//碰撞自动停机
void Crash_Check(float dT)
{
	if(!fly_ready) return;
		
	if(!Flip_Mode)
	{
		if(imu_data.acc>15000) 
		{
			auto_lock = 1;//标记为自动上锁
			Lock_Fly();//上锁
		}
	}
}

//上锁
void Lock_Fly(void)
{
	fly_ready = 0;//上锁
	buzzer_warn = 2;//声音提示
	LED_warn = 2;//灯光提示
}

//飞机事件检测
void Fly_Event_Check(float dT)
{
	Throw_Fly_Check(dT);
	Att_Err_Check(dT);
	Auto_Landing(dT);
	Crash_Check(dT);
	Auto_TakeOff(dT);
	Power_On_Self_Test(dT);
}
